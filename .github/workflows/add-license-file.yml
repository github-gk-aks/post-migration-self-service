name: Add License File

on:
  workflow_dispatch:

jobs:
  add-license:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout central repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GK_PAT }}
          path: ${{ github.workspace }}/source-repo

      - name: Check if output directory exists
        run: |
            if [ ! -d "${{ github.workspace }}/source-repo/output" ]; then
              echo "Output directory does not exist. Creating..."
              mkdir -p "${{ github.workspace }}/source-repo/output"
            else
              echo "Output directory already exists."
            fi

      - name: Import GPG key
        run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
            rm -rf /tmp/gpg.sh
            echo '#!/bin/bash' >> /tmp/gpg.sh
            echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
            chmod +x /tmp/gpg.sh
  
      - name: Setup git
        run: |
            git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
            git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
            git config --global commit.gpgsign true
            git config --global user.signingkey $GPG_KEY_ID
            git config --global gpg.program /tmp/gpg.sh
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Iterate Over Repos
        run: |
          mapfile -t repositories < <(awk '{print $1}' "${{ github.workspace }}/source-repo/data/repositories.txt")
          for repo in "${repositories[@]}"; do
            echo "Processing repository: $repo"

            # Clone target repository
            git clone --depth 1  "https://${{ secrets.GK_PAT }}@github.com/$repo.git" "./target-repo"

            # Check if LICENSE file exists in default branch
            if [ ! -f "${{ github.workspace }}/target-repo/LICENSE" ]; then

              cd "${{ github.workspace }}/target-repo"

              # if git show-ref --verify --quiet refs/heads/github-migration; then
                git checkout github-migration
                git pull origin github-migration
              else
                git checkout -b github-migration
                git pull origin github-migration
              fi

              if cp "${{ github.workspace }}/source-repo/data/LICENSE" "${{ github.workspace }}/target-repo/LICENSE" >> "${{ github.workspace }}/source-repo/output/add-license-file-errors.txt" 2>&1; then
                echo "LICENSE file copied successfully."
                echo "$repo;License File Copied Successfully." >> "${{ github.workspace }}/source-repo/output/add-license-file.txt"
              else
                error_message=$(tail -n 1 "${{ github.workspace }}/source-repo/output/add-license-file-errors.txt")
                echo "Error: Failed to copy LICENSE file."
                echo "$repo;Failed to Copy License File.;$error_message" >> "${{ github.workspace }}/source-repo/output/add-license-file.txt"
              fi
            else
              echo "License file already exists"
              echo "$repo;License File Already Exists." >> "${{ github.workspace }}/source-repo/output/add-license-file.txt"
            fi
              
              # Stage and commit the changes for target repository

            if [ -n "$(git status --porcelain)" ]; then
                git pull origin github-migration
                git add LICENSE
                git commit -S -m "Add LICENSE File - $(date +"%Y-%m-%d %H:%M:%S")" 
                git push origin github-migration
            else
                echo "No changes to commit."
            fi

            # cd "${{ github.workspace }}/source-repo/output"
            # if [ -n "$(git status --porcelain)" ]; then
            #     git pull origin main
            #     git add add-license-file.txt
            #     git commit -S -m "Add Output File - $(date +"%Y-%m-%d %H:%M:%S")" 
            #     git push origin main
            # else
            #     echo "No changes to commit."
            # fi
           
            # Clean up
            cd ..
            rm -rf "${{ github.workspace }}/target-repo"
          done
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
