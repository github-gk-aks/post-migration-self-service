name: Create PRs and Add Reviewers Or Teams

on:
  workflow_dispatch:

jobs:
  create-pr:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GK_PAT }}
        path: ./source-repo

    - name: Check if output directory exists
      run: |
        if [ ! -d "${{ github.workspace }}/source-repo/output" ]; then
          echo "Output directory does not exist. Creating..."
          mkdir -p "${{ github.workspace }}/source-repo/output"
        else
          echo "Output directory already exists."
        fi

    - name: Create PR and Add Reviewers/Teams
      run: |
        REVIEWERS_FILE="${{ github.workspace }}/source-repo/data/reviewers.txt"
        mapfile -t repositories < <(awk '{print $1}' "$REVIEWERS_FILE" | sort -u)
        # So, in summary, the entire statement reads the content of the reviewers file, 
        # extracts the first column (repository names) from each line, sorts them alphabetically,
        # removes any duplicate names, and stores them in the repositories array for further processing.

        for repo in "${repositories[@]}"; do
            IFS='/' read -r org_name repo_name <<< "$repo"
            echo "Processing repository: $org_name/$repo_name"
        
            default_branch=$(git ls-remote --symref https://github.com/$repo HEAD | awk -F '/' '/^ref:/{print $NF}' | awk '{print $1}')

            echo "Default Branch is $default_branch"

            # Create Pull Request
            http_status_and_response=$(curl -w "%{http_code}\n" -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GK_PAT }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/$repo/pulls \
                -d '{"title":"Migrating Changes","body":"Please pull these migration related changes","head":"github-migration","base":"'"$default_branch"'"}')

            http_status=$(echo "$http_status_and_response" | tail -n 1)
            pr_response=$(echo "$http_status_and_response" | sed '$d')
            pr_response_message=$(echo "$pr_response" | jq -r '.errors[0].message')

            if [[ $http_status == 201 ]]; then
                pr_number=$(echo "$pr_response" | jq -r '.number')
                REVIEWERS=$(awk -v repo="$repo" '$1 == repo { print substr($0, length($1)+2) }' "$REVIEWERS_FILE")
                IFS=' ' read -ra REVIEWER_ARRAY <<< "$REVIEWERS"

                # Add reviewers to the pull request
                http_status_and_response_reviewers=$(curl -w "%{http_code}\n" -L \
                    -X POST \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer ${{ secrets.GK_PAT }}" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    "https://api.github.com/repos/$repo/pulls/$pr_number/requested_reviewers" \
                    -d '{"reviewers":['$(printf '"%s",' "${REVIEWER_ARRAY[@]}" | sed 's/,$//')']}')

                http_status_reviewers=$(echo "$http_status_and_response_reviewers" | tail -n 1)
                reviewers_response=$(echo "$http_status_and_response_reviewers" | sed '$d')
                reviewers_response_message=$(echo "$reviewers_response" | jq -r '.message')

                if [[ $http_status_reviewers == 201 ]]; then
                    echo "$repo ; Pull Request with number $pr_number Created Successfully with status code $http_status ; Reviewers added successfully with status code $http_status_reviewers" >> "${{ github.workspace }}/source-repo/output/create-pr-output.txt"
                else
                    echo "$repo ; Pull Request with number $pr_number Created Successfully with status code $http_status ; Failed to add reviewers to the Pull Request. HTTP Status is $http_status_reviewers ; Response body is $reviewers_response_message" >> "${{ github.workspace }}/source-repo/output/create-pr-output.txt"
                fi
            else
                echo "$repo ; Failed to create Pull Request. HTTP Status is $http_status ; Response is $pr_response_message" >> "${{ github.workspace }}/source-repo/output/create-pr-output.txt"
                continue  # Continue to the next repository
            fi
        done
    
    - name: Import GPG key
      run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
      env: 
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

    - name: Add the custom gpg siging program that passes the passphrase to the gpg CLI
      run: |
          rm -rf /tmp/gpg.sh
          echo '#!/bin/bash' >> /tmp/gpg.sh
          echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
          chmod +x /tmp/gpg.sh

    - name: Setup git
      run: |
            git config commit.gpgsign true
            git config user.signingkey $GPG_KEY_ID
            git config gpg.program /tmp/gpg.sh
      env:
        GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

    - name: Commit Changes
      run: |
          cd ${{ github.workspace }}/source-repo/output
          if [ -n "$(git status --porcelain)" ]; then
            git config user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
            git config user.name ${{ secrets.GIT_COMMITTER_NAME }}
            git pull origin
            git add create-pr-output.txt
            git commit -S -m "Add create-pr-output.txt - $(date +"%Y-%m-%d %H:%M:%S")" 
            git push
          else
            echo "No changes to commit."
          fi
      env:
        GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
      working-directory: ${{ github.workspace }}
