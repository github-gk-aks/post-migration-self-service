name: Delete Specific Workflow Runs from Multiple Repositories

on:
  workflow_dispatch:
    inputs:
      workflow-names:
        description: 'Comma-separated list of workflow names to delete (e.g., "Check Migration Status","Check Github Migration Branch")'
        required: true

jobs:
  delete-selected-workflows:
    env:
        GH_TOKEN: ${{ secrets.GK_PAT }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GK_PAT }}
          path: ./source-repo

      - name: Delete Workflow Runs
        run: |
        
          mapfile -t repositories < "${{ github.workspace }}/source-repo/repositories.txt"

          WORKFLOW_NAMES=${{ github.event.inputs['workflow-names'] }}
          echo "Workfkow name is $WORKFLOW_NAMES"
          IFS=',' read -ra NAMES_ARRAY <<< "$WORKFLOW_NAMES"
          echo "Workflow name in second stage is $NAMES_ARRAY"

          for repo in "${repositories[@]}"; do
            IFS='/' read -r org_name repo_name <<< "$repo"
            echo "Processing repository: $org_name/$repo_name"

            workflows="[]"
            page=1
            while : ; do
                response=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/$org_name/$repo_name/actions/workflows?per_page=100&page=$page")
                current_page_workflows=$(echo "$response" | jq '.workflows')

                if [ "$(echo "$current_page_workflows" | jq 'length')" -eq 0 ]; then
                    break
                fi

                # Merge current page workflows with the total workflows
                workflows=$(echo "$workflows $current_page_workflows" | jq -s '.[0] + .[1]')
                ((page++))
                sleep 0.2
            done

            total_workflows=$(echo "$workflows" | jq 'length')
            echo "Total workflows in $org_name/$repo_name: $total_workflows"

            for workflow_name_input in "${NAMES_ARRAY[@]}"; do

                workflow_name_input=$(echo "$workflow_name_input" | xargs | sed 's/\\\\/\\\\\\\\/g')  # Escape the backslashes
                echo "Fetching runs for workflow: "$workflow_name_input" in repository: $org_name/$repo_name"

                workflow_id=$(echo "$workflows" | jq -r --arg NAME "$workflow_name_input" '.[] | select(.name == $NAME) | .id') 

                if [ -n "$workflow_id" ]; then
                  echo "Workflow ID for $workflow_name_escaped: $workflow_id"
                      all_runs="[]"
                      page=1
                      while : ; do
                          response=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/$org_name/$repo_name/actions/workflows/$workflow_id/runs?per_page=100&page=$page")
                          current_page_runs=$(echo "$response" | jq '.workflow_runs')

                          if [ "$(echo "$current_page_runs" | jq 'length')" -eq 0 ]; then
                              break
                          fi

                          all_runs=$(echo "$all_runs $current_page_runs" | jq -s '.[0] + .[1]')
                          ((page++))
                          sleep 0.1
                      done

                      total_runs=$(echo "$all_runs" | jq 'length')
                      echo "Total runs for workflow $workflow_name_input: $total_runs"

                      run_ids=$(echo "$all_runs" | jq -r '.[].id')

                      for run_id in $run_ids; do
                          echo "Deleting run ID: $run_id"
                          response=$(gh api --method DELETE -H "Accept: application/vnd.github.v3+json" /repos/$org_name/$repo_name/actions/runs/$run_id)

                          if [ $? -eq 0 ]; then
                              echo "Successfully deleted run ID: $run_id"
                          else
                              echo "Failed to delete run ID: $run_id"
                          fi
                          sleep 0.1
                      done
                else
                  echo "No workflow found with name: $workflow_name_input in repository: $org_name/$repo_name"
                fi
            done
          done
