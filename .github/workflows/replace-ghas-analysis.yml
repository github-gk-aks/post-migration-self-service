name: Replace GHAS ANALYSIS
on:
  workflow_dispatch:

jobs:
  replace-ghas-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GK_PAT }}
          path: ./source-repo

      - name: Setup Committer Email and Name
        run: |
          git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
          git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}

      - name: Import GPG key
        run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
          rm -rf /tmp/gpg.sh
          echo '#!/bin/bash' >> /tmp/gpg.sh
          echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
          chmod +x /tmp/gpg.sh

      - name: Setup git
        run: |
          git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
          git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
          git config --global commit.gpgsign true
          git config --global user.signingkey $GPG_KEY_ID
          git config --global gpg.program /tmp/gpg.sh
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Iterate Over Repos
        run: |
          mapfile -t repositories < <(awk '{print $1}' "./source-repo/data/replacements_ghas.txt" | sort -u)
          for repo in "${repositories[@]}"; do
            echo "Processing repository: $repo"
            
            # Clone target repository
            git clone --depth 1 -b "github-migration" "https://${{ secrets.GK_PAT }}@github.com/$repo.git" "./target-repo"

            # Iterate through replacement entries for the repository
            # cat -A "${{ github.workspace }}/source-repo/data/replacements_ghas.txt"
            # grep_result=$(grep -E "^$(echo "$repo" | sed 's/\//\\\//g')" "${{ github.workspace }}/source-repo/data/replacements_ghas.txt")
            # echo "DEBUG: Grep Result: $grep_result"
            # echo "Searching for repository: $repo"
            # grep_result=$(grep -E "^$(echo "$repo" | sed 's/\//\\\//g')" "${{ github.workspace }}/source-repo/data/replacements_ghas.txt")
            # echo "grep_result: $grep_result"        
        
              grep "^$repo" "${{ github.workspace }}/source-repo/data/replacements_ghas.txt" | while IFS=$'\t' read -r _ file default_branch language occurance; do
              echo "Inside the while loop now"
              echo "Processing file: $file, Default Branch: $default_branch, Language: $language, occurance: $occurance"
              
              # Remove leading and trailing spaces, and replace single quotes with double quotes
              cleaned_language=$(echo "$language" | tr -d "[:space:]" | sed "s/'/\"/g; s/\[//; s/\]//")
              echo "Cleaned Language String: $cleaned_language"

              # Convert the string to an array
              #IFS=, read -ra languages_array <<< "${cleaned_language:1:${#cleaned_language}-2}"
              IFS=, read -ra languages_array <<< "$(echo "$cleaned_language" | tr -d '"')"
              echo "Final Cleaned Array: ${languages_array[@]}"

              # Check if the specified file exists
              if [ -f "./target-repo/$file" ]; then
                echo "File $file found. Proceeding with replacements."    
                echo "Debug: Checking Default Branch - $default_branch"
                echo "Debug: Original Language String - $language"
                echo "Debug: Cleaned Language String - $cleaned_language"
                echo "Debug: Final Cleaned Array - ${languages_array[@]}"
                echo "Debug: Occurance Parameter - $occurance"

                if [[ "$default_branch" == "main" || "$default_branch" == "master" ]]; then
                  if [[ "$occurance" == "S" || "$occurance" == "M" ]]; then
                      case "${languages_array[*]}" in
                          "go")
                              cp "./source-repo/data/codeql_analysis_${default_branch}_go_${occurance}.yml" "./target-repo/.github/workflows/codeql_analysis_${default_branch}_go_${occurance}.yml"
                              ;;
                          "java")
                              cp "./source-repo/data/codeql_analysis_${default_branch}_java_${occurance}.yml" "./target-repo/.github/workflows/codeql_analysis_${default_branch}_java_${occurance}.yml"
                              ;;
                          "javascript go")
                              cp "./source-repo/data/codeql_analysis_${default_branch}_javascript_go_${occurance}.yml" "./target-repo/.github/workflows/codeql_analysis_${default_branch}_javascript_go_${occurance}.yml"
                              ;;
                          "java go")
                              cp "./source-repo/data/codeql_analysis_${default_branch}_java_go_${occurance}.yml" "./target-repo/.github/workflows/codeql_analysis_${default_branch}_java_go_${occurance}.yml"
                              ;;
                          *)
                              echo "Unsupported Languages"
                              ;;
                      esac
                      rm -f "./target-repo/$file"
                  else
                      echo "Unsupported occurance parameter"
                  fi
                else
                  echo "Unsupported default branch parameter"
                fi

                
              #   if [ "$default_branch" == "main" ]; then
              #       # Check if 'python' and 'javascript' are present in the array
              #       echo "Inside the $default_branch loop"
              #       python_found=false
              #       javascript_found=false
              #       java_found=false
              #       ruby_found=false
              #       csharp_found=false

              #       for lang in "${languages_array[@]}"; do
              #           if [ "$lang" == "python" ]; then
              #               python_found=true
              #           elif [ "$lang" == "javascript" ]; then
              #               javascript_found=true
              #           elif [ "$lang" == "java" ]; then
              #               java_found=true
              #           elif [ "$lang" == "ruby" ]; then
              #               ruby_found=true
              #           elif [ "$lang" == "csharp" ]; then
              #               csharp_found=true
              #           fi
              #       done
              #       echo "Will be executing the main logic now"
              #       if [ "$python_found" == true ] && [ "$javascript_found" == true ] && [ "$java_found" == true ] && [ "$ruby_found" == true ] && [ "$csharp_found" == true ]; then
              #           echo "First If statment match"
              #           cp "./source-repo/data/test.yml" "./target-repo/.github/workflows/test.yml"
              #           rm -f "./target-repo/$file"
              #       elif [ "$python_found" == true ] && [ "$javascript_found" == true ] && [ "$java_found" == false ] && [ "$ruby_found" == false ] && [ "$csharp_found" == false ]; then
              #           echo "Second if statment match"
              #           cp "./source-repo/data/test1.yml" "./target-repo/.github/workflows/test1.yml"
              #           rm -f "./target-repo/$file"
              #       else
              #           echo "Unsupported combination: Default Branch: $default_branch, Language: $language"
              #       fi
              #   fi    
                # Add new test.yml from source repository to target repository based on default_branch and language
                # if [ "$default_branch" == "main" ]; then
                #   if [ "$occurance" == "S" ]; then
                #     if [ "${languages_array[*]}" == "go" ]; then
                #       cp "./source-repo/data/codeql_analysis_main_go_S.yml" "./target-repo/.github/workflows/codeql_analysis_main_go_S.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "java" ]; then
                #       cp "./source-repo/data/codeql_analysis_main_java_S.yml" "./target-repo/.github/workflows/codeql_analysis_main_java_S.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "javascript go" ]; then
                #       cp "./source-repo/data/codeql_analysis_main_javascript_go_S.yml" "./target-repo/.github/workflows/codeql_analysis_main_javascript_go_S.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "java go" ]; then
                #       cp "./source-repo/data/codeql_analysis_main_java_go_S.yml" "./target-repo/.github/workflows/codeql_analysis_main_java_go_S.yml"
                #       rm -f "./target-repo/$file"
                #     else
                #       echo "Unsuppoted Languages"
                #     fi
                #   elseif [ "$occurance" == "M" ]; then
                #     if [ "${languages_array[*]}" == "go" ]; then
                #       cp "./source-repo/data/codeql_analysis_main_go_M.yml" "./target-repo/.github/workflows/codeql_analysis_main_go_M.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "java" ]; then
                #       cp "./source-repo/data/codeql_analysis_main_java_M.yml" "./target-repo/.github/workflows/codeql_analysis_main_java_M.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "javascript go" ]; then
                #       cp "./source-repo/data/codeql_analysis_main_javascript_go_M.yml" "./target-repo/.github/workflows/codeql_analysis_main_javascript_go_M.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "java go" ]; then
                #       cp "./source-repo/data/codeql_analysis_main_java_go_M.yml" "./target-repo/.github/workflows/codeql_analysis_main_java_go_M.yml"
                #       rm -f "./target-repo/$file"
                #     else
                #       echo "Unsuppoted Languages"
                #     fi
                #   else
                #     echo "Unsupported occurance paramter"
                #   fi
                # elif [ "$default_branch" == "master" ]; then
                #   if [ "$occurance" == "S" ]; then
                #     if [ "${languages_array[*]}" == "go" ]; then
                #       cp "./source-repo/data/codeql_analysis_master_go_S.yml" "./target-repo/.github/workflows/codeql_analysis_master_go_S.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "java" ]; then
                #       cp "./source-repo/data/codeql_analysis_master_java_S.yml" "./target-repo/.github/workflows/codeql_analysis_master_java_S.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "javascript go" ]; then
                #       cp "./source-repo/data/codeql_analysis_master_javascript_go_S.yml" "./target-repo/.github/workflows/codeql_analysis_master_javascript_go_S.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "java go" ]; then
                #       cp "./source-repo/data/codeql_analysis_master_java_go_S.yml" "./target-repo/.github/workflows/codeql_analysis_master_java_go_S.yml"
                #       rm -f "./target-repo/$file"
                #     else
                #       echo "Unsuppoted Languages"
                #     fi
                #   elseif [ "$occurance" == "M" ]; then
                #     if [ "${languages_array[*]}" == "go" ]; then
                #       cp "./source-repo/data/codeql_analysis_master_go_M.yml" "./target-repo/.github/workflows/codeql_analysis_master_go_M.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "java" ]; then
                #       cp "./source-repo/data/codeql_analysis_master_java_M.yml" "./target-repo/.github/workflows/codeql_analysis_master_java_M.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "javascript go" ]; then
                #       cp "./source-repo/data/codeql_analysis_master_javascript_go_M.yml" "./target-repo/.github/workflows/codeql_analysis_master_javascript_go_M.yml"
                #       rm -f "./target-repo/$file"
                #     elseif [ "${languages_array[*]}" == "java go" ]; then
                #       cp "./source-repo/data/codeql_analysis_master_java_go_M.yml" "./target-repo/.github/workflows/codeql_analysis_master_java_go_M.yml"
                #       rm -f "./target-repo/$file"
                #     else
                #       echo "Unsuppoted Languages"
                #     fi
                #   else
                #     echo "Unsupported occurance paramter"
                #   fi
                # else
                #   echo "Unsupported default branch parameter"
                # fi
              else
                echo "File $file not found in repository $repo."
              fi
            done

            cd "./target-repo"
            if git diff --quiet; then
              echo "No changes to commit. Skipping commit step."
            else
              git pull origin github-migration
              git add .
              git commit -S -m "Replace files - $(date +"%Y-%m-%d %H:%M:%S")"
              git push origin github-migration
            fi
            # Clean up
            cd ..
            rm -rf "./target-repo"
          done
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
