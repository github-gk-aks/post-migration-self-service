name: Replace GHAS ANALYSIS
on:
  workflow_dispatch:

jobs:
  replace-ghas-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GK_PAT }}
          path: ./source-repo

      - name: Setup Committer Email and Name
        run: |
          git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
          git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}

      - name: Import GPG key
        run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
          rm -rf /tmp/gpg.sh
          echo '#!/bin/bash' >> /tmp/gpg.sh
          echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
          chmod +x /tmp/gpg.sh

      - name: Setup git
        run: |
          git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
          git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
          git config --global commit.gpgsign true
          git config --global user.signingkey $GPG_KEY_ID
          git config --global gpg.program /tmp/gpg.sh
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Iterate Over Repos
        run: |
          mapfile -t repositories < <(awk '{print $1}' "data/replacements_ghas.txt" | sort -u)
          for entry in "${repositories[@]}"; do
            echo "Processing repository: $repo"
            
            # Clone target repository
            git clone --depth 1 -b "github-migration" "https://${{ secrets.GK_PAT }}@github.com/$repo.git" "./target-repo"

            # Iterate through replacement entries for the repository
            grep "^$repo" data/replacement_ghas.txt | while IFS=$'\t' read -r _ file default_branch language; do
              echo "Processing file: $file, Default Branch: $default_branch, Language: $language"

              # Check if the specified file exists
              if [ -f "./target-repo/$file" ]; then
                echo "File $file found. Proceeding with replacements."             

                # Add new test.yml from source repository to target repository based on default_branch and language
                if [ "$default_branch" == "main" ] && [ "$language" == "[ 'python', 'javascript', 'java', 'ruby', 'csharp' ]" ]; then
                  cp "./source-repo/data/test.yml" "./target-repo/.github/workflows/test.yml"
                  rm -f "./target-repo/$file"
                elif [ "$default_branch" == "main" ] && [ "$language" == "[ 'python', 'javascript']" ]; then
                  cp "./source-repo/data/test1.yml" "./target-repo/.github/workflows/test1.yml"
                  rm -f "./target-repo/$file"
                elif [ "$default_branch" == "F" ] && [ "$language" == "E" ]; then
                  cp "./source-repo/data/test.yml" "./target-repo/.github/workflows/test.yml"
                  rm -f "./target-repo/$file"
                else
                  echo "Unsupported combination: Default Branch: $default_branch, Language: $language"
                fi
              else
                echo "File $file not found in repository $repo."
              fi
            done

            cd "./target-repo"
            if git diff --quiet; then
              echo "No changes to commit. Skipping commit step."
            else
              git pull origin "$default_branch"
              git add .
              git commit -S -m "Replace files - $(date +"%Y-%m-%d %H:%M:%S")"
              git push origin "$default_branch"
            fi
            # Clean up
            cd ..
            rm -rf "./target-repo"
          done
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
