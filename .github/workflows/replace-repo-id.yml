name: Replace Repository ID
    
on:
  workflow_dispatch:

jobs:
 update-repo-id:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.GK_PAT }}
            path: ./source-repo

      - name: Import GPG key
        run: |
            echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
            GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
    
      - name: Add the custom gpg siging program that passes the passphrase to the gpg CLI
        run: |
            rm -rf /tmp/gpg.sh
            echo '#!/bin/bash' >> /tmp/gpg.sh
            echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
            chmod +x /tmp/gpg.sh
    
      - name: Setup git
        run: |
            git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
            git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
            git config commit.gpgsign true
            git config user.signingkey $GPG_KEY_ID
            git config gpg.program /tmp/gpg.sh
        env:
            GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Update Repository ID in JSON file
        uses: actions/github-script@v6
        with:
            github-token: ${{ secrets.GK_PAT}}
            script: |
                const fs = require('fs');
                const { execSync } = require('child_process');

                // Read repository names and IDs from output-repo-id.txt file
                const repoFilePath = '${{ github.workspace }}/source-repo/input/output-repo-id.txt';
                let repoData = [];
                try {
                    const data = fs.readFileSync(repoFilePath, 'utf8');
                    repoData = data.trim().split('\n').slice(1).map(line => {
                        const [repoName, repoId] = line.split(', ');
                        return { repoName, repoId };
                    });
                } catch (err) {
                    console.error(`Error reading file: ${err}`);
                }

                for (const { repoName, repoId } of repoData) {
                    const [orgName, repo] = repoName.split('/');

                    // Checkout the repository
                    execSync(`git clone -b github-migration https://${{ secrets.GK_PAT }}@github.com/${orgName}/${repo}.git`);

                    // Read the JSON file
                    const jsonFilePath = `${repo}/json_migration/${repo}-env-spec.json`;
                    let jsonData;
                    try {
                        const data = fs.readFileSync(jsonFilePath, 'utf8');
                        jsonData = JSON.parse(data);
                    } catch (err) {
                        console.error(`Error reading file: ${err}`);
                        continue;
                    }

                    // Replace the destinationRepositoryId
                    for (const key in jsonData) {
                        jsonData[key].destinationRepositoryId = repoId;
                    }

                    // Write the updated JSON data back to the file
                    fs.writeFileSync(jsonFilePath, JSON.stringify(jsonData, null, 2));

                    // Check if there are any changes
                    const changes = execSync(`cd ${repo} && git status --porcelain`).toString().trim();

                    if (changes) {
                        // Commit and push the changes
                        execSync(`cd ${repo} && git add . && git commit -S -m "Update destinationRepositoryId" && git push`);
                    }
                    
                    // Commit and push the changes
                    //execSync(`cd ${repo} && git add . && git commit -S -m "Update destinationRepositoryId" && git push`);
                    execSync(`cd ..`);
                }
        env:
            GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
            working-directory: ${{ github.workspace }}


      - name: Commit Changes
        run: |
            # cd ${{ github.workspace }}/source-repo/output
            if [ -n "$(git status --porcelain)" ]; then
                git add .
                git commit -S -m "Update destinationRepositoryId- $(date +"%Y-%m-%d %H:%M:%S")" 
                git push
            else
                echo "No changes to commit."
            fi
        env:
            GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
            working-directory: ${{ github.workspace }}