name: Repository Object Count

on:
    workflow_dispatch
#   issues:
#     types:
#       - opened
#       - edited

# expected issue body input should be structured as follows:
  #     {
  #         "rep01": {
  #             "repository": "rep01",
  #             "organisation": "org01"
  #         },
  #         "rep02": {
  #             "repository": "rep02",
  #             "organisation": "org02"
  #         } 
  #     }

jobs:
  count-repository-objects:
    # if: contains(github.event.issue.labels.*.name, 'repo-obj-count')
    runs-on: ubuntu-latest
    # strategy:  
    #   matrix:
    #     repository: ${{ fromJson(github.event.issue.body).*.repository }}  # rep01, repo02
    #   max-parallel: 1
    steps:
      - name: Commit Count
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GK_PAT}}
          script: |
                let totalCommits = 0;
                let page = 1;
                let perPage = 100;
                while (true) {
                const commits = await github.rest.repos.listCommits({
                    owner: 'github-gk-aks',
                    repo: 'firstgithubrepo',
                    per_page: perPage,
                    page: page++
                });
                if (commits.data.length === 0) break;
                totalCommits += commits.data.length;
                }
                console.log('Total Commits:', totalCommits);

      - name: Open Issues Count
        uses: actions/github-script@v6
        with:   
           github-token: ${{ secrets.GK_PAT }}
           script: |
                const openIssues = await github.rest.issues.listForRepo({
                    owner: 'github-gk-aks',
                    repo: 'firstgithubrepo',
                    state: 'open'
                });
                /* Filter out pull requests from the list of open issues as - 
                    Note: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the pull_request key. Be aware that the id of a pull request returned from "Issues" endpoints will be an issue id.
                */
                const filteredIssues = openIssues.data.filter(issue => !issue.pull_request);

                console.log('Total Open Issues:', filteredIssues.length);