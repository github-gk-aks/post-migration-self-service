name: Repository Object Count

on:
    workflow_dispatch:

jobs:
  count-repository-objects:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GK_PAT }}
          path: ./source-repo

      - name: Read repository names from file
        id: read-repos
        run: |
          # Read repository names from repositories.txt file
          echo "::set-output name=repos::$(cat ${{ github.workspace }}/source-repo/repositories.txt | jq -R -s 'split("\n")[:-1]')"
        shell: bash
        working-directory: ${{ github.workspace }}

      - name: Repository Object Count
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GK_PAT}}
          script: |
              const repos = ${{ toJson(steps.read-repos.outputs.repos) }};
              const perPage = 100;
              for (const repo of repos) {

                  const [orgName, repoName] = repo.split('/');
                  let totalCommits = 0;
                  let page = 1;
                  while (true) {
                  const commits = await github.rest.repos.listCommits({
                      owner: orgName,
                      repo: repoName,
                      per_page: perPage,
                      page: page++
                  });
                  if (commits.data.length === 0) break;
                  totalCommits += commits.data.length;
                  }
                  console.log('Total Commits:', totalCommits);

                  let totalOpenIssues = 0;
                  while (true) {
                      const issues = await github.rest.issues.listForRepo({
                      owner: orgName,
                      repo: repoName,
                      state: 'open',
                      per_page: perPage,
                      page: page++
                      });
                      if (issues.data.length === 0) break;
                      /* Filter out pull requests from the list of open issues as - 
                          Note: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the pull_request key. Be aware that the id of a pull request returned from "Issues" endpoints will be an issue id.
                      */
                      const filteredIssues = issues.data.filter(issue => !issue.pull_request);
                      totalOpenIssues += filteredIssues.length;
                  }
                  console.log('Total Open Issues (excluding pull requests):', totalOpenIssues);

                  let totalPullRequests = 0;
                  while (true) {
                  const pullRequests = await github.rest.pulls.list({
                      owner: orgName,
                      repo: repoName,
                      state: 'open',
                      per_page: perPage,
                      page: page++
                  });
                  if (pullRequests.data.length === 0) break;
                  totalPullRequests += pullRequests.data.length;
                  }
                  console.log('Total Open Pull Requests:', totalPullRequests);

                  let totalBranches = 0;
                  while (true) {
                  const branches = await github.rest.repos.listBranches({
                      owner: orgName,
                      repo: repoName,
                      per_page: perPage,
                      page: page++
                  });
                  if (branches.data.length === 0) break;
                  totalBranches += branches.data.length;
                  }
                  console.log('Total Number of branches', totalBranches);

                  let totalReleases = 0;
                  while (true) {
                    const releases = await github.rest.repos.listReleases({
                      owner: orgName,
                      repo: repoName,
                      per_page: perPage,
                      page: page++
                    });
                    if (releases.data.length === 0) break;
                    totalReleases += releases.data.length;
                  }
                  console.log('Total Number of releases', totalReleases);

                  let totalTags = 0;
                  while (true) {
                  const tags = await github.rest.repos.listTags({
                      owner: orgName,
                      repo: repoName,
                      per_page: perPage,
                      page: page++
                  });
                  if (tags.data.length === 0) break;
                  totalTags += tags.data.length;
                  }
                  console.log('Total Number of Tags', totalTags);

              }