name: Trigger Repository Workflows

on:
  issues:
    types:
      - opened
      - edited

# expected issue body input should be structured as follows:
  #     {
  #         "rep01": {
  #             "repository": "rep01",
  #             "organisation": "org01"
  #         },
  #         "rep02": {
  #             "repository": "rep02",
  #             "organisation": "org02"
  #         } 
  #     }

jobs:
  trigger-repo-workflows:
    if: contains(github.event.issue.labels.*.name, 'post-mg-steps')
    runs-on: ubuntu-latest
    strategy:  
      matrix:
        repository: ${{ fromJson(github.event.issue.body).*.repository }}  # rep01, repo02
      max-parallel: 1
    steps:
      - name: Acknowledgment For Runner Change
        uses: actions/github-script@v6
        with:
          script: |
            const response = github.request(
              'POST /repos/{owner}/{repo}/issues/{issue_number}/comments',
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: '${{ github.event.issue.number }}',
                body: 'Starting Runner Change for `${{ matrix.repository}}`.....',
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              }
            );        

      - name: Checkout Central Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GK_PAT }}

      - name: Trigger Runner Change Workflows in Other Repositories
        id: step-1
        run: |
            echo "Triggering workflow in ${{ matrix.repository }}"
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GK_PAT }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ fromJSON(github.event.issue.body)[matrix.repository].organisation }}/${{ matrix.repository }}/actions/workflows/replace-runner.yml/dispatches \
              -d '{
                "ref": "github-migration"
              }'
        env:
          GITHUB_TOKEN: ${{ secrets.GK_PAT }}

      # - name: Trigger Repository Settings Workflows in Other Repositories
      #   id: step-1
      #   run: |
      #       echo "Triggering workflow in ${{ matrix.repository }}"
      #       curl -X POST \
      #         -H "Accept: application/vnd.github+json" \
      #         -H "Authorization: Bearer ${{ secrets.GK_PAT }}" \
      #         -H "X-GitHub-Api-Version: 2022-11-28" \
      #       https://api.github.com/repos/${{ fromJSON(github.event.issue.body)[matrix.repository].organisation }}/${{ matrix.repository }}/actions/workflows/settings-meet-standard.yml/dispatches \
      #         -d '{
      #           "ref": "github-migration",
      #           "inputs": {
      #             "repository": "${{ matrix.repository }}",
      #             "organization": "${{ fromJSON(github.event.issue.body)[matrix.repository].organisation }}"
      #           }
      #         }'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GK_PAT }}

      # - name: Wait for 30 seconds
      #   run: sleep 30

      - name: Acknowledgment For Repository Setting Change
        uses: actions/github-script@v6
        with:
          script: |
            const response = github.request(
              'POST /repos/{owner}/{repo}/issues/{issue_number}/comments',
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: '${{ github.event.issue.number }}',
                body: 'Starting Repository Change for `${{ matrix.repository}}`.....',
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              }
            );              

      - name: Trigger Repository Settings Workflows in Other Repositories
        id: step-2
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GK_PAT}}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: '${{ fromJSON(github.event.issue.body)[matrix.repository].organisation }}',
              repo: '${{ matrix.repository }}',
              workflow_id: 'settings-meet-standard.yml',
              ref: 'github-migration',
              inputs: {
                repository: '${{ matrix.repository }}',
                organisation: '${{ fromJSON(github.event.issue.body)[matrix.repository].organisation }}'
              }
            });

      # - name: Encode License Content as Base64
      #   id: encode-license
      #   run: |
      #     LICENSE_CONTENT=$(cat data/license-file.txt)
      #     BASE64_LICENSE_CONTENT=$(echo -n "$LICENSE_CONTENT" | base64)
      #     echo "BASE64_LICENSE_CONTENT=$BASE64_LICENSE_CONTENT" ::set-output name=BASE64_LICENSE_CONTENT::$BASE64_LICENSE_CONTENT
 

      - name: Trigger License File Check and Add Workflows in Other Repositories
        id: step-3
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GK_PAT}}
          script: |
            const fs = require('fs');
            const licenseContent = fs.readFileSync('data/license-file.txt', 'utf8');
            await github.rest.actions.createWorkflowDispatch({
              owner: '${{ fromJSON(github.event.issue.body)[matrix.repository].organisation }}',
              repo: '${{ matrix.repository }}',
              workflow_id: 'add-license-file.yml',
              ref: 'github-migration',
              inputs: {
                licenseContent: 'licenseContent'
              }
            });


      # - name: Trigger Action accessible for repositories whithin the enterprise workflow
      #   id: step-3
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.GK_PAT}}
      #     script: |
      #       await github.rest.actions.createWorkflowDispatch({
      #         owner: '${{ fromJSON(github.event.issue.body)[matrix.repository].organisation }}',
      #         repo: '${{ matrix.repository }}',
      #         workflow_id: 'access-action-enterprise.yml',
      #         ref: 'github-migration',
      #         inputs: {
      #           repository: '${{ matrix.repository }}',
      #           organisation: '${{ fromJSON(github.event.issue.body)[matrix.repository].organisation }}'
      #         }
      #       });

