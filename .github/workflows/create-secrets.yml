on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:
  create-secrets:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Install requests
      run: pip install requests

    - name: Create secrets for repositories
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        import requests
        import os
        import json

        # List of secrets to be created
        secrets = {
            "SECRET_NAME_1": "secret_value_1",
            "SECRET_NAME_2": "secret_value_2",
            "SECRET_NAME_3": "secret_value_3",
            "SECRET_NAME_4": "secret_value_4"
        }

        # Read repositories from the input text file
        with open('repositories.txt', 'r') as f:
            repos = f.readlines()

        headers = {
            'Authorization': f'token {os.getenv("GITHUB_TOKEN")}',
            'Accept': 'application/vnd.github.v3+json'
        }

        for repo_url in repos:
            repo_url = repo_url.strip()
            if not repo_url:
                continue

            owner, repo = repo_url.split('/')[-2:]
            repo = repo.replace('.git', '')

            # Get public key for the repository
            key_url = f'https://api.github.com/repos/{owner}/{repo}/actions/secrets/public-key'
            key_response = requests.get(key_url, headers=headers)
            key_response.raise_for_status()
            key_data = key_response.json()
            key_id = key_data['key_id']
            public_key = key_data['key']

            for secret_name, secret_value in secrets.items():
                encrypted_value = encrypt_secret(public_key, secret_value)
                secret_url = f'https://api.github.com/repos/{owner}/{repo}/actions/secrets/{secret_name}'
                secret_data = {
                    'encrypted_value': encrypted_value,
                    'key_id': key_id
                }
                response = requests.put(secret_url, headers=headers, data=json.dumps(secret_data))
                response.raise_for_status()

        def encrypt_secret(public_key: str, secret_value: str) -> str:
            from base64 import b64encode
            from nacl import encoding, public

            public_key = public.PublicKey(public_key.encode('utf-8'), encoding.Base64Encoder())
            sealed_box = public.SealedBox(public_key)
            encrypted = sealed_box.encrypt(secret_value.encode('utf-8'))
            return b64encode(encrypted).decode('utf-8')
